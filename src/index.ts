import { app, BrowserWindow, dialog, ipcMain } from 'electron';
import FileHound from 'filehound';
import fs from 'fs';
import path from 'path';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

declare global {
  interface Window {
      funcs: any;
  }
}

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  ipcMain.handle('loadFolder', async () => dialog.showOpenDialog({ properties: ['openFile', 'multiSelections', 'openDirectory'] }))

  // ipcMain.handle("loadFolder", (event, arg) => {
  //   return dialog.showOpenDialog({
  //     properties: ["openFile"],
  //     filters: [{ name: "Images", extensions: ["png","jpg","jpeg"] }]
  //   });
  
  //   return result.then(({canceled, filePaths, bookmarks}) => {
  //     const base64 = fs.readFileSync(filePaths[0]).toString('base64');
  //     const src = `data:image/jpg;base64,${base64}`
  //     return src;
  //   });
  //  });

  ipcMain.handle('loadImage', (event, filepath) => {
    return new Promise((resolve, reject) => {
      const base64 = fs.readFileSync(filepath).toString('base64');
      const src = `data:image/jpg;base64,${base64}`;
      resolve(src);
    });
  });

  ipcMain.handle("getDirFilesList", (event, arg) => {
    console.log('arg', arg);
    return FileHound.create()
      .paths(arg)
      .ext(['jpg', 'jpeg', 'png'])
      .find();
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
